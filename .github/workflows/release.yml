name: App Store Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  XCODE_VERSION: '15.0'

jobs:
  validate-version:
    name: Validate Release Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi

  full-test-suite:
    name: Complete Test Suite
    runs-on: macos-13
    needs: [validate-version]
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache Swift Packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}

      - name: Run Complete Test Suite
        run: |
          set -o pipefail
          xcodebuild test \
            -scheme FuekiWallet \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
            -enableCodeCoverage YES \
            -resultBundlePath ./ReleaseTests.xcresult \
            | xcpretty --report html --output scripts/ci/release-test-report.html

      - name: Verify Code Coverage Threshold
        run: |
          COVERAGE=$(xcrun xccov view --report --json ./ReleaseTests.xcresult | python3 -c "import sys, json; print(json.load(sys.stdin)['lineCoverage'])")
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "‚ùå Coverage $COVERAGE% is below 80% threshold"
            exit 1
          fi
          echo "‚úÖ Coverage meets threshold"

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-test-results
          path: |
            ReleaseTests.xcresult
            scripts/ci/release-test-report.html

  security-audit:
    name: Security Audit
    runs-on: macos-13
    needs: [validate-version]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Security Scan
        run: bash scripts/ci/security-scan.sh

      - name: Run Penetration Tests
        run: bash scripts/ci/pentest.sh

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: scripts/ci/security-report.json

  build-release:
    name: Build App Store Release
    runs-on: macos-13
    needs: [validate-version, full-test-suite, security-audit]
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install Fastlane
        run: |
          brew install fastlane
          gem install fastlane-plugin-increment_build_number

      - name: Import Certificates
        env:
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: bash scripts/ci/import-certificates.sh

      - name: Increment Build Number
        run: |
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          fastlane run increment_build_number build_number:$BUILD_NUMBER

      - name: Build for App Store
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APP_PASSWORD }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: fastlane release

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: app-store-ipa
          path: ./build/FuekiWallet.ipa
          retention-days: 90

      - name: Upload dSYM
        uses: actions/upload-artifact@v4
        with:
          name: app-store-dsym
          path: ./build/FuekiWallet.app.dSYM.zip
          retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download IPA
        uses: actions/download-artifact@v4
        with:
          name: app-store-ipa
          path: ./artifacts

      - name: Generate Release Notes
        id: release_notes
        run: |
          bash scripts/ci/generate-release-notes.sh > release-notes.md
          echo "Generated release notes"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          name: Fueki Wallet v${{ needs.validate-version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            ./artifacts/FuekiWallet.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: always()

    steps:
      - name: Notify Success
        if: needs.create-github-release.result == 'success'
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "üöÄ Fueki Wallet v${{ needs.validate-version.outputs.version }} Released to App Store!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*App Store Release Complete*\n\nVersion: ${{ needs.validate-version.outputs.version }}\n\n‚úÖ All tests passed\n‚úÖ Security audit complete\n‚úÖ Release uploaded to App Store Connect"
                  }
                }
              ]
            }

      - name: Notify Failure
        if: needs.create-github-release.result != 'success'
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "‚ùå App Store release failed for Fueki Wallet",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Release Build Failed*\n\nVersion: ${{ needs.validate-version.outputs.version }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
                  }
                }
              ]
            }
