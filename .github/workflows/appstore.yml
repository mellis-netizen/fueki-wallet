name: App Store Deployment

on:
  push:
    tags:
      - 'v*.*.*'  # Production releases only
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., 1.0.0)'
        required: true
      skip_review:
        description: 'Skip App Store review submission'
        type: boolean
        default: false

env:
  XCODE_VERSION: '15.0'
  SCHEME: 'FuekiWallet'
  CONFIGURATION: 'Release'

jobs:
  # ========================================
  # Pre-deployment Validation
  # ========================================
  validate:
    name: Pre-deployment Validation
    runs-on: macos-13
    timeout-minutes: 15

    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
      should_deploy: ${{ steps.validate.outputs.should_deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version info
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          BUILD_NUMBER=${{ github.run_number }}

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "🚀 Deploying version: $VERSION ($BUILD_NUMBER)"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi
          echo "✅ Version format is valid"

      - name: Check if version already exists
        id: validate
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          # Check if this version exists in App Store Connect
          # For now, we'll allow deployment
          echo "should_deploy=true" >> $GITHUB_OUTPUT

      - name: Verify all tests passed
        run: |
          # Ensure all CI checks passed
          echo "✅ Checking CI status..."
          # Add check for required CI workflows here

      - name: Security scan check
        run: |
          echo "🔒 Verifying security scans passed..."
          # Verify security workflow completed successfully

  # ========================================
  # Build Production Archive
  # ========================================
  build:
    name: Build Production Release
    runs-on: macos-13
    needs: validate
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-production-${{ hashFiles('**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-production-

      - name: Install dependencies
        run: |
          if [ -f Podfile ]; then
            pod install --repo-update
          fi
          gem install fastlane -NV

      - name: Setup App Store Connect API Key
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          mkdir -p ~/.private_keys
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
          chmod 600 ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      - name: Import code signing certificates
        env:
          CERTIFICATES_P12_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_P12_BASE64 }}
          CERTIFICATES_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          echo "$CERTIFICATES_P12_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 \
            -k $KEYCHAIN_PATH \
            -P "$CERTIFICATES_PASSWORD" \
            -T /usr/bin/codesign

          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          rm certificate.p12

      - name: Install provisioning profiles
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.APPSTORE_PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/appstore.mobileprovision

      - name: Update app version
        run: |
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ needs.validate.outputs.version }}" "${{ env.SCHEME }}/Info.plist"
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ needs.validate.outputs.build_number }}" "${{ env.SCHEME }}/Info.plist"

      - name: Build archive
        run: |
          xcodebuild archive \
            -workspace ${{ env.SCHEME }}.xcworkspace \
            -scheme ${{ env.SCHEME }} \
            -configuration ${{ env.CONFIGURATION }} \
            -archivePath build/${{ env.SCHEME }}.xcarchive \
            -destination 'generic/platform=iOS' \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM=${{ secrets.DEVELOPMENT_TEAM_ID }} \
            | xcpretty

      - name: Export for App Store
        run: |
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.DEVELOPMENT_TEAM_ID }}</string>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ secrets.BUNDLE_IDENTIFIER }}</key>
              <string>${{ secrets.APPSTORE_PROVISIONING_PROFILE_NAME }}</string>
            </dict>
            <key>manageAppVersionAndBuildNumber</key>
            <false/>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath build/${{ env.SCHEME }}.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist \
            | xcpretty

      - name: Verify IPA
        run: |
          IPA_PATH="build/${{ env.SCHEME }}.ipa"
          if [ ! -f "$IPA_PATH" ]; then
            echo "❌ IPA file not found at $IPA_PATH"
            exit 1
          fi

          IPA_SIZE=$(du -h "$IPA_PATH" | cut -f1)
          echo "✅ IPA created successfully (Size: $IPA_SIZE)"

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: FuekiWallet-AppStore-${{ needs.validate.outputs.version }}
          path: build/*.ipa
          retention-days: 90

      - name: Upload dSYMs
        uses: actions/upload-artifact@v4
        with:
          name: dSYMs-AppStore-${{ needs.validate.outputs.version }}
          path: build/${{ env.SCHEME }}.xcarchive/dSYMs/
          retention-days: 365

  # ========================================
  # Deploy to App Store Connect
  # ========================================
  deploy:
    name: Deploy to App Store
    runs-on: macos-13
    needs: [validate, build]
    timeout-minutes: 45
    environment:
      name: production
      url: https://apps.apple.com/app/id${{ secrets.APP_STORE_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download IPA
        uses: actions/download-artifact@v4
        with:
          name: FuekiWallet-AppStore-${{ needs.validate.outputs.version }}
          path: build/

      - name: Setup App Store Connect API Key
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          mkdir -p ~/.private_keys
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      - name: Install fastlane
        run: |
          gem install fastlane -NV

      - name: Upload to App Store Connect
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          fastlane deliver \
            --api_key_path ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8 \
            --api_key_id $APP_STORE_CONNECT_API_KEY_ID \
            --issuer_id $APP_STORE_CONNECT_ISSUER_ID \
            --ipa build/*.ipa \
            --skip_screenshots \
            --skip_metadata \
            --force \
            --precheck_include_in_app_purchases false

      - name: Submit for review
        if: github.event.inputs.skip_review != 'true'
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          fastlane deliver \
            --api_key_path ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8 \
            --api_key_id $APP_STORE_CONNECT_API_KEY_ID \
            --issuer_id $APP_STORE_CONNECT_ISSUER_ID \
            --submit_for_review \
            --automatic_release \
            --submission_information "{\"export_compliance_uses_encryption\": false}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ needs.validate.outputs.version }}
          body: |
            ## 🚀 App Store Release v${{ needs.validate.outputs.version }}

            **Build Number:** ${{ needs.validate.outputs.build_number }}
            **Status:** Submitted to App Store

            ### What's New
            See the App Store listing for full release notes.

            ### Downloads
            - Production IPA included in release assets
            - Debug symbols (dSYMs) archived for crash reporting
          files: |
            build/*.ipa
          draft: false
          prerelease: false

  # ========================================
  # Post-deployment Tasks
  # ========================================
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [validate, deploy]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update version tracking
        run: |
          echo "${{ needs.validate.outputs.version }}" > latest-release.txt
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add latest-release.txt
          git commit -m "Update latest release version to ${{ needs.validate.outputs.version }}"
          git push

      - name: Create deployment notification
        run: |
          echo "✅ Successfully deployed version ${{ needs.validate.outputs.version }} to App Store"
          # Add Slack/Discord/email notification here

      - name: Archive release documentation
        run: |
          mkdir -p releases/${{ needs.validate.outputs.version }}
          echo "Version: ${{ needs.validate.outputs.version }}" > releases/${{ needs.validate.outputs.version }}/info.txt
          echo "Build: ${{ needs.validate.outputs.build_number }}" >> releases/${{ needs.validate.outputs.version }}/info.txt
          echo "Date: $(date)" >> releases/${{ needs.validate.outputs.version }}/info.txt
