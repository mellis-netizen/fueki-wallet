openapi: 3.0.3
info:
  title: Fueki Mobile Wallet API
  version: 1.0.0
  description: |
    # Fueki Mobile Wallet API

    RESTful API for the Fueki non-custodial mobile cryptocurrency wallet. This API provides endpoints for wallet management, transaction operations, blockchain interactions, and security features leveraging Threshold Signature Scheme (TSS) technology.

    ## Key Features
    - Multi-chain cryptocurrency wallet support (Bitcoin, Ethereum, etc.)
    - TSS-based key management for enhanced security
    - Biometric authentication integration
    - Social recovery mechanisms
    - Fiat on/off ramp integrations
    - Real-time transaction updates via WebSocket

    ## Security
    All API endpoints require authentication unless explicitly marked as public. Sensitive operations require additional biometric authentication confirmation.

    ## Rate Limiting
    - Standard endpoints: 100 requests per minute
    - Authentication endpoints: 10 requests per minute
    - Transaction endpoints: 30 requests per minute

  contact:
    name: Fueki Development Team
    email: api-support@fueki.io
    url: https://fueki.io/support
  license:
    name: Proprietary
    url: https://fueki.io/license

servers:
  - url: https://api.fueki.io/v1
    description: Production server
  - url: https://api-staging.fueki.io/v1
    description: Staging server
  - url: https://api-dev.fueki.io/v1
    description: Development server
  - url: http://localhost:8080/v1
    description: Local development server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Wallets
    description: Wallet creation, management, and retrieval
  - name: Transactions
    description: Transaction creation, signing, and history
  - name: Assets
    description: Asset management and balance queries
  - name: Blockchain
    description: Blockchain-specific operations
  - name: Keys
    description: TSS key management and recovery
  - name: Security
    description: Security operations and biometric authentication
  - name: Payment Ramps
    description: Fiat on/off ramp integrations
  - name: Settings
    description: User preferences and application settings
  - name: Notifications
    description: Push notifications and real-time updates

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account with email and password
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            example:
              email: user@example.com
              password: SecureP@ssw0rd!
              deviceId: A1B2C3D4-E5F6-G7H8-I9J0-K1L2M3N4O5P6
              deviceName: iPhone 14 Pro
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                userId: usr_1a2b3c4d5e6f
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                expiresIn: 3600
                tokenType: Bearer
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: DUPLICATE_EMAIL
                message: An account with this email already exists
                code: 409

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and create session
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            example:
              email: user@example.com
              password: SecureP@ssw0rd!
              deviceId: A1B2C3D4-E5F6-G7H8-I9J0-K1L2M3N4O5P6
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get a new access token using refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Valid refresh token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate current session and access token
      operationId: logoutUser
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/biometric/register:
    post:
      tags:
        - Authentication
        - Security
      summary: Register biometric authentication
      description: Enable biometric authentication for the user's device
      operationId: registerBiometric
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - biometricType
                - publicKey
              properties:
                biometricType:
                  type: string
                  enum: [faceId, touchId]
                  description: Type of biometric authentication
                publicKey:
                  type: string
                  description: Device public key for biometric verification
                deviceId:
                  type: string
                  description: Unique device identifier
      responses:
        '201':
          description: Biometric authentication registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  biometricId:
                    type: string
                  status:
                    type: string
                    enum: [active, pending]
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Wallet Endpoints
  /wallets:
    get:
      tags:
        - Wallets
      summary: List user wallets
      description: Retrieve all wallets associated with the authenticated user
      operationId: listWallets
      security:
        - BearerAuth: []
      parameters:
        - name: blockchain
          in: query
          description: Filter by blockchain
          schema:
            type: string
            enum: [bitcoin, ethereum, polygon, binance-smart-chain]
        - name: status
          in: query
          description: Filter by wallet status
          schema:
            type: string
            enum: [active, archived, deleted]
      responses:
        '200':
          description: List of wallets
          content:
            application/json:
              schema:
                type: object
                properties:
                  wallets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Wallet'
                  total:
                    type: integer
                    description: Total number of wallets
              example:
                wallets:
                  - walletId: wlt_abc123
                    name: My Bitcoin Wallet
                    blockchain: bitcoin
                    address: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
                    balance:
                      value: "0.5"
                      currency: BTC
                      usdValue: "21500.00"
                    status: active
                    createdAt: "2025-10-21T10:30:00Z"
                total: 3
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Wallets
      summary: Create new wallet
      description: |
        Create a new cryptocurrency wallet using TSS key generation.
        This operation requires biometric authentication confirmation.
      operationId: createWallet
      security:
        - BearerAuth: []
        - BiometricAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletCreationRequest'
            example:
              name: My Bitcoin Wallet
              blockchain: bitcoin
              derivationPath: "m/84'/0'/0'"
              tssConfiguration:
                threshold: 2
                totalShares: 3
                shareLocations:
                  - secureEnclave
                  - cloudBackup
                  - socialRecovery
      responses:
        '201':
          description: Wallet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
              example:
                walletId: wlt_abc123
                name: My Bitcoin Wallet
                blockchain: bitcoin
                address: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
                publicKey: 02a1633cafcc01ebfb6d78e39f687a1f0995c62fc95f51ead10a02ee0be551b5dc
                balance:
                  value: "0"
                  currency: BTC
                  usdValue: "0.00"
                status: active
                createdAt: "2025-10-21T10:30:00Z"
                tssMetadata:
                  threshold: 2
                  totalShares: 3
                  shareIds:
                    - shr_001
                    - shr_002
                    - shr_003
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Biometric authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /wallets/{walletId}:
    get:
      tags:
        - Wallets
      summary: Get wallet details
      description: Retrieve detailed information about a specific wallet
      operationId: getWallet
      security:
        - BearerAuth: []
      parameters:
        - name: walletId
          in: path
          required: true
          description: Unique wallet identifier
          schema:
            type: string
            pattern: '^wlt_[a-zA-Z0-9]{10,}$'
      responses:
        '200':
          description: Wallet details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags:
        - Wallets
      summary: Update wallet
      description: Update wallet name or settings
      operationId: updateWallet
      security:
        - BearerAuth: []
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 50
                status:
                  type: string
                  enum: [active, archived]
      responses:
        '200':
          description: Wallet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Wallets
      summary: Delete wallet
      description: |
        Permanently delete a wallet. This operation requires biometric authentication.
        Warning: This action cannot be undone.
      operationId: deleteWallet
      security:
        - BearerAuth: []
        - BiometricAuth: []
      parameters:
        - name: walletId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Wallet deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Biometric authentication required
        '404':
          $ref: '#/components/responses/NotFound'

  # Transaction Endpoints
  /transactions:
    get:
      tags:
        - Transactions
      summary: List transactions
      description: Retrieve transaction history for a wallet
      operationId: listTransactions
      security:
        - BearerAuth: []
      parameters:
        - name: walletId
          in: query
          required: true
          description: Wallet ID to fetch transactions for
          schema:
            type: string
        - name: limit
          in: query
          description: Number of transactions to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of transactions to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter by transaction status
          schema:
            type: string
            enum: [pending, confirmed, failed]
      responses:
        '200':
          description: Transaction list
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  total:
                    type: integer
                  hasMore:
                    type: boolean
              example:
                transactions:
                  - txId: txn_xyz789
                    walletId: wlt_abc123
                    type: send
                    status: confirmed
                    amount:
                      value: "0.05"
                      currency: BTC
                    from: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
                    to: bc1q3j3k4l5m6n7o8p9q0r1s2t3u4v5w6x7y8z9a0b1
                    fee:
                      value: "0.0001"
                      currency: BTC
                    confirmations: 6
                    hash: a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6
                    timestamp: "2025-10-21T10:30:00Z"
                total: 150
                hasMore: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /transactions/create:
    post:
      tags:
        - Transactions
      summary: Create unsigned transaction
      description: Create a transaction but do not sign or broadcast it yet
      operationId: createTransaction
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreationRequest'
            example:
              walletId: wlt_abc123
              to: bc1q3j3k4l5m6n7o8p9q0r1s2t3u4v5w6x7y8z9a0b1
              amount:
                value: "0.05"
                currency: BTC
              priority: medium
              memo: Payment for services
      responses:
        '201':
          description: Unsigned transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsignedTransaction'
              example:
                txId: txn_xyz789
                walletId: wlt_abc123
                to: bc1q3j3k4l5m6n7o8p9q0r1s2t3u4v5w6x7y8z9a0b1
                amount:
                  value: "0.05"
                  currency: BTC
                estimatedFee:
                  value: "0.0001"
                  currency: BTC
                total:
                  value: "0.0501"
                  currency: BTC
                status: unsigned
                expiresAt: "2025-10-21T11:00:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          description: Insufficient funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transactions/{txId}/sign:
    post:
      tags:
        - Transactions
      summary: Sign transaction
      description: |
        Sign a transaction using TSS key shares. This operation requires biometric authentication.
        The transaction will be signed but not broadcast until confirmed.
      operationId: signTransaction
      security:
        - BearerAuth: []
        - BiometricAuth: []
      parameters:
        - name: txId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                biometricConfirmation:
                  type: boolean
                  description: Confirmation of biometric authentication
      responses:
        '200':
          description: Transaction signed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedTransaction'
              example:
                txId: txn_xyz789
                status: signed
                signature: 304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d09
                signedAt: "2025-10-21T10:35:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Biometric authentication required or failed
        '404':
          $ref: '#/components/responses/NotFound'

  /transactions/{txId}/broadcast:
    post:
      tags:
        - Transactions
      summary: Broadcast signed transaction
      description: Broadcast a signed transaction to the blockchain network
      operationId: broadcastTransaction
      security:
        - BearerAuth: []
      parameters:
        - name: txId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction broadcast successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              example:
                txId: txn_xyz789
                status: pending
                hash: a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6
                broadcastAt: "2025-10-21T10:36:00Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Transaction not signed or already broadcast

  /transactions/{txId}:
    get:
      tags:
        - Transactions
      summary: Get transaction details
      description: Retrieve detailed information about a specific transaction
      operationId: getTransaction
      security:
        - BearerAuth: []
      parameters:
        - name: txId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Asset Endpoints
  /assets:
    get:
      tags:
        - Assets
      summary: List supported assets
      description: Get list of all supported cryptocurrencies and tokens
      operationId: listAssets
      parameters:
        - name: blockchain
          in: query
          description: Filter by blockchain
          schema:
            type: string
        - name: type
          in: query
          description: Filter by asset type
          schema:
            type: string
            enum: [coin, token, nft]
      responses:
        '200':
          description: List of supported assets
          content:
            application/json:
              schema:
                type: object
                properties:
                  assets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'

  /assets/balance:
    get:
      tags:
        - Assets
      summary: Get wallet balance
      description: Get current balance for a specific wallet
      operationId: getBalance
      security:
        - BearerAuth: []
      parameters:
        - name: walletId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wallet balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
              example:
                walletId: wlt_abc123
                balance:
                  value: "0.5"
                  currency: BTC
                  usdValue: "21500.00"
                tokens:
                  - tokenAddress: "0x..."
                    symbol: USDT
                    balance:
                      value: "1000.00"
                      currency: USDT
                      usdValue: "1000.00"
                lastUpdated: "2025-10-21T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # Key Management Endpoints
  /keys/shares:
    get:
      tags:
        - Keys
      summary: List key shares
      description: Get information about TSS key shares (metadata only, not the actual shares)
      operationId: listKeyShares
      security:
        - BearerAuth: []
      parameters:
        - name: walletId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Key share metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  walletId:
                    type: string
                  shares:
                    type: array
                    items:
                      $ref: '#/components/schemas/KeyShareMetadata'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /keys/recovery/initiate:
    post:
      tags:
        - Keys
      summary: Initiate key recovery
      description: Start the social recovery process for a wallet
      operationId: initiateRecovery
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - walletId
                - recoveryMethod
              properties:
                walletId:
                  type: string
                recoveryMethod:
                  type: string
                  enum: [socialRecovery, cloudBackup]
                oauthProvider:
                  type: string
                  enum: [google, apple]
      responses:
        '202':
          description: Recovery initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  recoveryId:
                    type: string
                  status:
                    type: string
                  expiresAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Payment Ramp Endpoints
  /payment-ramps/buy:
    post:
      tags:
        - Payment Ramps
      summary: Initiate crypto purchase
      description: Start a fiat-to-crypto purchase flow
      operationId: buyCrypto
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoPurchaseRequest'
      responses:
        '201':
          description: Purchase initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRampResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /payment-ramps/sell:
    post:
      tags:
        - Payment Ramps
      summary: Initiate crypto sale
      description: Start a crypto-to-fiat sale flow
      operationId: sellCrypto
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CryptoSaleRequest'
      responses:
        '201':
          description: Sale initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentRampResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Settings Endpoints
  /settings:
    get:
      tags:
        - Settings
      summary: Get user settings
      description: Retrieve user preferences and application settings
      operationId: getSettings
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '401':
          $ref: '#/components/responses/Unauthorized'

    patch:
      tags:
        - Settings
      summary: Update settings
      description: Update user preferences
      operationId: updateSettings
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsUpdate'
      responses:
        '200':
          description: Settings updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Notification Endpoints
  /notifications/register:
    post:
      tags:
        - Notifications
      summary: Register for push notifications
      description: Register device for APNS push notifications
      operationId: registerNotifications
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - deviceToken
                - platform
              properties:
                deviceToken:
                  type: string
                  description: APNS device token
                platform:
                  type: string
                  enum: [ios, android]
                preferences:
                  type: object
                  properties:
                    transactionAlerts:
                      type: boolean
                    securityAlerts:
                      type: boolean
                    priceAlerts:
                      type: boolean
      responses:
        '201':
          description: Device registered for notifications
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

# Component Definitions
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from authentication endpoints
    BiometricAuth:
      type: apiKey
      in: header
      name: X-Biometric-Token
      description: Biometric authentication token for sensitive operations

  schemas:
    # Authentication Schemas
    UserRegistration:
      type: object
      required:
        - email
        - password
        - deviceId
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          format: password
          minLength: 8
          description: User password (min 8 characters)
        deviceId:
          type: string
          format: uuid
          description: Unique device identifier
        deviceName:
          type: string
          description: Human-readable device name

    UserLogin:
      type: object
      required:
        - email
        - password
        - deviceId
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        deviceId:
          type: string
          format: uuid

    AuthResponse:
      type: object
      required:
        - userId
        - accessToken
        - refreshToken
        - expiresIn
        - tokenType
      properties:
        userId:
          type: string
          description: Unique user identifier
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token
        expiresIn:
          type: integer
          description: Access token expiration time in seconds
        tokenType:
          type: string
          enum: [Bearer]

    # Wallet Schemas
    Wallet:
      type: object
      required:
        - walletId
        - name
        - blockchain
        - address
        - status
        - createdAt
      properties:
        walletId:
          type: string
          description: Unique wallet identifier
          pattern: '^wlt_[a-zA-Z0-9]{10,}$'
        name:
          type: string
          description: User-defined wallet name
          maxLength: 50
        blockchain:
          type: string
          enum: [bitcoin, ethereum, polygon, binance-smart-chain]
        address:
          type: string
          description: Wallet address
        publicKey:
          type: string
          description: Wallet public key
        balance:
          $ref: '#/components/schemas/Balance'
        status:
          type: string
          enum: [active, archived, deleted]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tssMetadata:
          $ref: '#/components/schemas/TSSMetadata'

    WalletDetails:
      allOf:
        - $ref: '#/components/schemas/Wallet'
        - type: object
          properties:
            derivationPath:
              type: string
            extendedPublicKey:
              type: string
            recentTransactions:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'
              maxItems: 10

    WalletCreationRequest:
      type: object
      required:
        - name
        - blockchain
      properties:
        name:
          type: string
          maxLength: 50
        blockchain:
          type: string
          enum: [bitcoin, ethereum, polygon, binance-smart-chain]
        derivationPath:
          type: string
          default: "m/84'/0'/0'"
        tssConfiguration:
          type: object
          properties:
            threshold:
              type: integer
              minimum: 2
              maximum: 5
              default: 2
            totalShares:
              type: integer
              minimum: 3
              maximum: 7
              default: 3
            shareLocations:
              type: array
              items:
                type: string
                enum: [secureEnclave, keychain, cloudBackup, socialRecovery]

    # Transaction Schemas
    Transaction:
      type: object
      required:
        - txId
        - walletId
        - type
        - status
        - amount
      properties:
        txId:
          type: string
          description: Unique transaction identifier
        walletId:
          type: string
          description: Associated wallet ID
        type:
          type: string
          enum: [send, receive, swap]
        status:
          type: string
          enum: [unsigned, signed, pending, confirmed, failed]
        amount:
          $ref: '#/components/schemas/Amount'
        from:
          type: string
          description: Sender address
        to:
          type: string
          description: Recipient address
        fee:
          $ref: '#/components/schemas/Amount'
        hash:
          type: string
          description: Blockchain transaction hash
        confirmations:
          type: integer
          minimum: 0
        timestamp:
          type: string
          format: date-time
        memo:
          type: string
          maxLength: 200

    TransactionDetails:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            blockNumber:
              type: integer
            blockHash:
              type: string
            gasUsed:
              type: string
            nonce:
              type: integer
            inputData:
              type: string
            logs:
              type: array
              items:
                type: object

    TransactionCreationRequest:
      type: object
      required:
        - walletId
        - to
        - amount
      properties:
        walletId:
          type: string
        to:
          type: string
          description: Recipient address
        amount:
          $ref: '#/components/schemas/Amount'
        priority:
          type: string
          enum: [low, medium, high]
          default: medium
          description: Transaction priority (affects fee)
        memo:
          type: string
          maxLength: 200
        maxFee:
          $ref: '#/components/schemas/Amount'
          description: Maximum acceptable fee

    UnsignedTransaction:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          required:
            - estimatedFee
            - total
            - expiresAt
          properties:
            estimatedFee:
              $ref: '#/components/schemas/Amount'
            total:
              $ref: '#/components/schemas/Amount'
            expiresAt:
              type: string
              format: date-time
              description: Transaction expiration time

    SignedTransaction:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          required:
            - signature
            - signedAt
          properties:
            signature:
              type: string
              description: Transaction signature
            signedAt:
              type: string
              format: date-time

    # Asset Schemas
    Asset:
      type: object
      required:
        - assetId
        - symbol
        - name
        - blockchain
      properties:
        assetId:
          type: string
        symbol:
          type: string
          description: Asset symbol (e.g., BTC, ETH)
        name:
          type: string
          description: Full asset name
        blockchain:
          type: string
        contractAddress:
          type: string
          description: Token contract address (for tokens)
        decimals:
          type: integer
        type:
          type: string
          enum: [coin, token, nft]
        logoUrl:
          type: string
          format: uri

    Balance:
      type: object
      required:
        - value
        - currency
      properties:
        value:
          type: string
          description: Balance value (as string to avoid precision issues)
        currency:
          type: string
          description: Currency symbol
        usdValue:
          type: string
          description: USD equivalent value

    Amount:
      type: object
      required:
        - value
        - currency
      properties:
        value:
          type: string
          description: Amount value
        currency:
          type: string
          description: Currency symbol

    # Key Management Schemas
    TSSMetadata:
      type: object
      properties:
        threshold:
          type: integer
          description: Minimum shares required for signing
        totalShares:
          type: integer
          description: Total number of key shares
        shareIds:
          type: array
          items:
            type: string
          description: List of share identifiers

    KeyShareMetadata:
      type: object
      properties:
        shareId:
          type: string
        index:
          type: integer
        location:
          type: string
          enum: [secureEnclave, keychain, cloudBackup, socialRecovery]
        status:
          type: string
          enum: [active, backed-up, lost]
        createdAt:
          type: string
          format: date-time
        lastAccessedAt:
          type: string
          format: date-time

    # Payment Ramp Schemas
    CryptoPurchaseRequest:
      type: object
      required:
        - walletId
        - amount
        - currency
        - provider
      properties:
        walletId:
          type: string
        amount:
          type: string
          description: Fiat amount to spend
        currency:
          type: string
          description: Fiat currency (USD, EUR, etc.)
        cryptoCurrency:
          type: string
          description: Crypto to purchase
        provider:
          type: string
          enum: [stripe, ramp]
        paymentMethod:
          type: string
          enum: [card, bank_transfer, apple_pay]

    CryptoSaleRequest:
      type: object
      required:
        - walletId
        - amount
        - currency
        - provider
      properties:
        walletId:
          type: string
        amount:
          $ref: '#/components/schemas/Amount'
        targetCurrency:
          type: string
          description: Fiat currency to receive
        provider:
          type: string
          enum: [stripe, ramp]
        paymentMethod:
          type: string

    PaymentRampResponse:
      type: object
      properties:
        orderId:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed]
        paymentUrl:
          type: string
          format: uri
          description: URL to complete payment
        expiresAt:
          type: string
          format: date-time

    # Settings Schemas
    Settings:
      type: object
      properties:
        userId:
          type: string
        currency:
          type: string
          description: Preferred fiat currency
          default: USD
        language:
          type: string
          default: en
        notifications:
          type: object
          properties:
            transactionAlerts:
              type: boolean
              default: true
            securityAlerts:
              type: boolean
              default: true
            priceAlerts:
              type: boolean
              default: false
        security:
          type: object
          properties:
            biometricEnabled:
              type: boolean
            sessionTimeout:
              type: integer
              description: Session timeout in seconds
              default: 300
        privacy:
          type: object
          properties:
            analyticsEnabled:
              type: boolean
              default: true

    SettingsUpdate:
      type: object
      properties:
        currency:
          type: string
        language:
          type: string
        notifications:
          type: object
        security:
          type: object
        privacy:
          type: object

    # Error Schema
    Error:
      type: object
      required:
        - error
        - message
        - code
      properties:
        error:
          type: string
          description: Error type identifier
        message:
          type: string
          description: Human-readable error message
        code:
          type: integer
          description: HTTP status code
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time

  # Reusable Responses
  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: INVALID_REQUEST
            message: The request parameters are invalid
            code: 400
            details:
              field: amount
              issue: Must be greater than 0

    Unauthorized:
      description: Authentication required or failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: UNAUTHORIZED
            message: Authentication token is invalid or expired
            code: 401

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: FORBIDDEN
            message: You do not have permission to access this resource
            code: 403

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: NOT_FOUND
            message: The requested resource was not found
            code: 404

    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: RATE_LIMIT_EXCEEDED
            message: Too many requests. Please try again later
            code: 429
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per time window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when rate limit resets (Unix timestamp)

# Security requirement for all endpoints by default
security:
  - BearerAuth: []
