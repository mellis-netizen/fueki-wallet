name: TestFlight Distribution

on:
  push:
    branches: [main, release/*]
    tags:
      - 'v*.*.*-beta*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
      build_number:
        description: 'Build number'
        required: false
      release_notes:
        description: 'Release notes for testers'
        required: false
        default: 'Bug fixes and improvements'

env:
  XCODE_VERSION: '15.0'
  SCHEME: 'FuekiWallet'
  CONFIGURATION: 'Release'

jobs:
  # ========================================
  # Pre-flight Checks
  # ========================================
  preflight:
    name: Pre-flight Validation
    runs-on: macos-13
    timeout-minutes: 10

    outputs:
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and build number
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            BUILD_NUMBER="${{ github.event.inputs.build_number }}"
          else
            # Extract from tag or generate
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
              VERSION=${GITHUB_REF#refs/tags/v}
            else
              VERSION=$(cat version.txt || echo "1.0.0")
            fi
            BUILD_NUMBER=${{ github.run_number }}
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "📱 Version: $VERSION ($BUILD_NUMBER)"

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" ]; then
            echo "❌ APP_STORE_CONNECT_API_KEY_ID secret not set"
            exit 1
          fi

          if [ -z "${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}" ]; then
            echo "❌ APP_STORE_CONNECT_ISSUER_ID secret not set"
            exit 1
          fi

          if [ -z "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" ]; then
            echo "❌ APP_STORE_CONNECT_API_KEY_BASE64 secret not set"
            exit 1
          fi

          echo "✅ All required secrets are configured"

  # ========================================
  # Build and Archive
  # ========================================
  build:
    name: Build for TestFlight
    runs-on: macos-13
    needs: preflight
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Cache DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-release-${{ hashFiles('**/*.xcodeproj') }}-${{ hashFiles('**/*.swift') }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-release-

      - name: Install dependencies
        run: |
          if [ -f Podfile ]; then
            pod install --repo-update
          fi

      - name: Install fastlane
        run: |
          gem install fastlane -NV
          fastlane --version

      - name: Setup App Store Connect API Key
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          mkdir -p ~/.private_keys
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
          chmod 600 ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      - name: Import code signing certificates
        env:
          CERTIFICATES_P12_BASE64: ${{ secrets.CERTIFICATES_P12_BASE64 }}
          CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
        run: |
          # Create temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate
          echo "$CERTIFICATES_P12_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 \
            -k $KEYCHAIN_PATH \
            -P "$CERTIFICATES_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/security

          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          rm certificate.p12

      - name: Install provisioning profiles
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Update version and build number
        run: |
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ needs.preflight.outputs.version }}" "${{ env.SCHEME }}/Info.plist"
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ needs.preflight.outputs.build_number }}" "${{ env.SCHEME }}/Info.plist"

      - name: Build and archive
        run: |
          xcodebuild archive \
            -workspace ${{ env.SCHEME }}.xcworkspace \
            -scheme ${{ env.SCHEME }} \
            -configuration ${{ env.CONFIGURATION }} \
            -archivePath build/${{ env.SCHEME }}.xcarchive \
            -destination 'generic/platform=iOS' \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM=${{ secrets.DEVELOPMENT_TEAM_ID }} \
            | xcpretty

      - name: Export IPA
        run: |
          # Create export options plist
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.DEVELOPMENT_TEAM_ID }}</string>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ secrets.BUNDLE_IDENTIFIER }}</key>
              <string>${{ secrets.PROVISIONING_PROFILE_NAME }}</string>
            </dict>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath build/${{ env.SCHEME }}.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist \
            | xcpretty

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: FuekiWallet-${{ needs.preflight.outputs.version }}-${{ needs.preflight.outputs.build_number }}
          path: build/*.ipa
          retention-days: 30

      - name: Upload dSYM for crash reporting
        uses: actions/upload-artifact@v4
        with:
          name: dSYMs-${{ needs.preflight.outputs.version }}
          path: build/${{ env.SCHEME }}.xcarchive/dSYMs/
          retention-days: 90

  # ========================================
  # Upload to TestFlight
  # ========================================
  testflight:
    name: Upload to TestFlight
    runs-on: macos-13
    needs: [preflight, build]
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download IPA
        uses: actions/download-artifact@v4
        with:
          name: FuekiWallet-${{ needs.preflight.outputs.version }}-${{ needs.preflight.outputs.build_number }}
          path: build/

      - name: Setup App Store Connect API Key
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          mkdir -p ~/.private_keys
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      - name: Install fastlane
        run: |
          gem install fastlane -NV

      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          fastlane pilot upload \
            --api_key_path ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8 \
            --api_key_id $APP_STORE_CONNECT_API_KEY_ID \
            --issuer_id $APP_STORE_CONNECT_ISSUER_ID \
            --ipa build/*.ipa \
            --skip_waiting_for_build_processing \
            --changelog "${{ github.event.inputs.release_notes || 'Bug fixes and improvements' }}"

      - name: Notify team
        if: success()
        run: |
          echo "✅ Successfully uploaded version ${{ needs.preflight.outputs.version }} (${{ needs.preflight.outputs.build_number }}) to TestFlight"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          name: TestFlight v${{ needs.preflight.outputs.version }}
          body: |
            ## TestFlight Build ${{ needs.preflight.outputs.build_number }}

            **Version:** ${{ needs.preflight.outputs.version }}
            **Build:** ${{ needs.preflight.outputs.build_number }}

            ### Changes
            ${{ github.event.inputs.release_notes || 'Bug fixes and improvements' }}

            ### Testing
            This build has been uploaded to TestFlight for internal testing.
          files: |
            build/*.ipa

  # ========================================
  # Notify on Failure
  # ========================================
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [build, testflight]
    if: failure()

    steps:
      - name: Send failure notification
        run: |
          echo "❌ TestFlight upload failed for version ${{ needs.preflight.outputs.version }}"
          # Add Slack/email notification here if needed
