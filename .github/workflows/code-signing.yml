name: Code Signing Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - sync-certificates
          - validate-profiles
          - renew-certificates
          - update-profiles
  schedule:
    # Check certificate expiry weekly
    - cron: '0 9 * * 1'

env:
  XCODE_VERSION: '15.0'

jobs:
  # ========================================
  # Sync Code Signing Assets
  # ========================================
  sync-certificates:
    name: Sync Code Signing Certificates
    runs-on: macos-13
    if: github.event.inputs.action == 'sync-certificates' || github.event_name == 'schedule'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install fastlane
        run: |
          gem install fastlane -NV
          fastlane --version

      - name: Setup App Store Connect API
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          mkdir -p ~/.private_keys
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
          chmod 600 ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      - name: Sync certificates with match
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        run: |
          # Create Matchfile
          cat > fastlane/Matchfile << EOF
          git_url("${MATCH_GIT_URL}")
          storage_mode("git")
          type("appstore")
          app_identifier("${{ secrets.BUNDLE_IDENTIFIER }}")
          username("${FASTLANE_USER}")
          team_id("${{ secrets.DEVELOPMENT_TEAM_ID }}")
          EOF

          # Sync certificates
          fastlane match appstore --readonly
          fastlane match development --readonly

      - name: Validate certificates
        run: |
          security find-identity -v -p codesigning

  # ========================================
  # Validate Provisioning Profiles
  # ========================================
  validate-profiles:
    name: Validate Provisioning Profiles
    runs-on: macos-13
    if: github.event.inputs.action == 'validate-profiles' || github.event_name == 'schedule'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup App Store Connect API
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          mkdir -p ~/.private_keys
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      - name: Install provisioning profiles
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          APPSTORE_PROVISIONING_PROFILE_BASE64: ${{ secrets.APPSTORE_PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles

          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/development.mobileprovision
          echo "$APPSTORE_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/appstore.mobileprovision

      - name: Check profile expiry
        run: |
          echo "üìã Checking provisioning profile expiration dates..."

          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "\nüîç Profile: $(basename "$profile")"

            # Extract expiration date
            security cms -D -i "$profile" > /tmp/profile.plist
            EXPIRY=$(plutil -extract ExpirationDate raw /tmp/profile.plist)

            # Convert to timestamp
            EXPIRY_TIMESTAMP=$(date -j -f "%Y-%m-%dT%H:%M:%SZ" "$EXPIRY" "+%s" 2>/dev/null || echo "0")
            CURRENT_TIMESTAMP=$(date "+%s")
            DAYS_UNTIL_EXPIRY=$(( ($EXPIRY_TIMESTAMP - $CURRENT_TIMESTAMP) / 86400 ))

            echo "Expires: $EXPIRY"
            echo "Days until expiry: $DAYS_UNTIL_EXPIRY"

            if [ $DAYS_UNTIL_EXPIRY -lt 30 ]; then
              echo "‚ö†Ô∏è  WARNING: Profile expires in less than 30 days!"
            elif [ $DAYS_UNTIL_EXPIRY -lt 0 ]; then
              echo "‚ùå ERROR: Profile has expired!"
              exit 1
            else
              echo "‚úÖ Profile is valid"
            fi
          done

      - name: Validate profile signing
        run: |
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "\nüîê Validating: $(basename "$profile")"

            security cms -D -i "$profile" > /tmp/profile.plist

            # Check team ID
            TEAM_ID=$(plutil -extract TeamIdentifier.0 raw /tmp/profile.plist)
            if [ "$TEAM_ID" != "${{ secrets.DEVELOPMENT_TEAM_ID }}" ]; then
              echo "‚ùå Team ID mismatch!"
              exit 1
            fi

            # Check bundle ID
            APP_ID=$(plutil -extract Entitlements.application-identifier raw /tmp/profile.plist)
            echo "App ID: $APP_ID"

            echo "‚úÖ Profile validation passed"
          done

  # ========================================
  # Check Certificate Expiry
  # ========================================
  check-expiry:
    name: Check Certificate Expiry
    runs-on: macos-13
    if: github.event_name == 'schedule'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import certificates
        env:
          CERTIFICATES_P12_BASE64: ${{ secrets.CERTIFICATES_P12_BASE64 }}
          CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/check.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          echo "$CERTIFICATES_P12_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k $KEYCHAIN_PATH -P "$CERTIFICATES_PASSWORD" -T /usr/bin/codesign

          security list-keychain -d user -s $KEYCHAIN_PATH
          rm certificate.p12

      - name: Check certificate expiration
        run: |
          echo "üîç Checking certificate expiration..."

          # Get certificate info
          CERT_INFO=$(security find-certificate -c "Apple Distribution" -p $RUNNER_TEMP/check.keychain-db | openssl x509 -noout -enddate)
          EXPIRY_DATE=$(echo "$CERT_INFO" | cut -d= -f2)

          # Calculate days until expiry
          EXPIRY_TIMESTAMP=$(date -j -f "%b %d %H:%M:%S %Y %Z" "$EXPIRY_DATE" "+%s")
          CURRENT_TIMESTAMP=$(date "+%s")
          DAYS_UNTIL_EXPIRY=$(( ($EXPIRY_TIMESTAMP - $CURRENT_TIMESTAMP) / 86400 ))

          echo "Certificate expires: $EXPIRY_DATE"
          echo "Days until expiry: $DAYS_UNTIL_EXPIRY"

          if [ $DAYS_UNTIL_EXPIRY -lt 30 ]; then
            echo "‚ö†Ô∏è  WARNING: Certificate expires in less than 30 days!"
            echo "EXPIRY_WARNING=true" >> $GITHUB_ENV
          fi

      - name: Create issue for expiring certificate
        if: env.EXPIRY_WARNING == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ö†Ô∏è Code Signing Certificate Expiring Soon',
              body: 'The Apple Distribution certificate will expire in less than 30 days. Please renew it as soon as possible.',
              labels: ['security', 'urgent']
            })

  # ========================================
  # Renew Certificates
  # ========================================
  renew-certificates:
    name: Renew Code Signing Certificates
    runs-on: macos-13
    if: github.event.inputs.action == 'renew-certificates'
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install fastlane
        run: |
          gem install fastlane -NV

      - name: Setup App Store Connect API
        env:
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
        run: |
          mkdir -p ~/.private_keys
          echo "$APP_STORE_CONNECT_API_KEY_BASE64" | base64 --decode > ~/.private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      - name: Renew certificates with match
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        run: |
          # Renew all certificates
          fastlane match nuke distribution
          fastlane match appstore --force_for_new_certificates

          echo "‚úÖ Certificates renewed successfully"

      - name: Update repository secrets
        run: |
          echo "‚ö†Ô∏è  Remember to update the following GitHub secrets:"
          echo "  - CERTIFICATES_P12_BASE64"
          echo "  - PROVISIONING_PROFILE_BASE64"
          echo "  - APPSTORE_PROVISIONING_PROFILE_BASE64"
