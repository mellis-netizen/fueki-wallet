name: Node.js CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # ========================================
  # Code Quality
  # ========================================
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          npm run lint || npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings=0 --format json --output-file eslint-report.json
        continue-on-error: true

      - name: Run TypeScript compiler
        run: npm run typecheck || npx tsc --noEmit --pretty

      - name: Check code formatting
        run: |
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}" || \
          npx prettier --write "**/*.{js,jsx,ts,tsx,json,md}"

      - name: Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json
          retention-days: 30

  # ========================================
  # Unit Tests with Coverage
  # ========================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage --maxWorkers=2 --ci

      - name: Generate coverage report
        run: |
          npx nyc report --reporter=text --reporter=lcov --reporter=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: nodejs-${{ matrix.node-version }}
          name: nodejs-${{ matrix.node-version }}-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            junit.xml
            test-results/
          retention-days: 30

  # ========================================
  # Test Vectors Validation
  # ========================================
  test-vectors:
    name: Cryptographic Test Vectors
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Bitcoin test vectors
        run: npm run test:bitcoin

      - name: Run Ethereum test vectors
        run: npm run test:ethereum

      - name: Run TSS test vectors
        run: npm run test:tss

      - name: Run Shamir test vectors
        run: npm run test:shamir

      - name: Upload test vector results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-vector-results
          path: tests/vectors/results/
          retention-days: 30

  # ========================================
  # Dependency Audit
  # ========================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true

      - name: Check audit results
        run: |
          CRITICAL=$(jq '.metadata.vulnerabilities.critical' npm-audit.json)
          HIGH=$(jq '.metadata.vulnerabilities.high' npm-audit.json)

          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"

          if [ "$CRITICAL" -gt 0 ]; then
            echo "Critical vulnerabilities found!"
            exit 1
          fi

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: npm-audit.json
          retention-days: 30

  # ========================================
  # Build Validation
  # ========================================
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [quality, test]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build --if-present

      - name: Check bundle size
        run: |
          if [ -d "dist" ] || [ -d "build" ]; then
            du -sh dist/ build/ 2>/dev/null || true
          fi

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            build/
          retention-days: 7

  # ========================================
  # All Checks Complete
  # ========================================
  checks-complete:
    name: All Checks Complete
    runs-on: ubuntu-latest
    needs: [quality, test, test-vectors, security, build]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.quality.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.test-vectors.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          else
            echo "All checks passed successfully"
          fi
